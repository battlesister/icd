# https://docs.travis-ci.com/user/languages/r
language: r
# https://ropensci.org/blog/2016/07/12/travis-osx
# https://docs.travis-ci.com/user/ci-environment/

# for RcppEigen to compile, (but disable if brew gcc on mac to avoid conflict)
# fortran: true # set explicitly in each stanza? but not recognized by an "include" group.

# may need this for clang:
# export LD_LIBRARY_PATH=/usr/local/clang/lib:$LD_LIBRARY_PATH
#
# See this for more recent compiler support than old defaults:
# https://docs.travis-ci.com/user/languages/c/
#
# and
#
# https://docs.travis-ci.com/user/languages/cpp/

# assert the defaults for os and dist - will add macos and bionic etc. later
os: linux
dist: xenial

cache:
  - packages
  - ccache

#addons:
#  apt:
#    packages:
#      - valgrind # when I do do this (probably too slow for travis anyway, then just put the apt addon in the specific build)
      #- r-cran-tinytex

#r_packages:
#  - tinytex

cran: https://cloud.r-project.org
# by default, DON'T do --as-cran, as it stops us using environment variables
# that conflict. Instead, state approximate CRAN check environment variables explicitly.
r_check_args: ""
warnings_are_errors: true

before_install:
  # - set -o allexport; source tools/env/travis-global; set +o allexport;
  # May need to set the R library directory so R CMD check finds packages
  # installed by travis (automatically, and in my scripts) and by R itself
  # https://stackoverflow.com/questions/31879011/r-cant-find-packages-installed-by-travis
  # - mkdir -p "$HOME/R.icd.lib"
  # - echo R_LIBS=$HOME/R.icd.lib:/usr/lib/R/site-library/" > ~/.Renviron
  # - sudo chmod 2777 "$HOME/R.icd.lib"
  - mkdir -p ~/.R ;
  - if [[ $TRAVIS_R_VERSION_STRING == devel ]]; then cat tools/mk/travis-debug.mk >> ~/.R/Makevars; fi;
  # this is one of oldrel, release or devel per https://docs.travis-ci.com/user/languages/r#configuration-options
  - cat tools/mk/travis-nowarn.mk >> ~/.R/Makevars
  # ignore the stubs for the pre-built vignettes, as the latex environments on travis are heterogeneous!
  - echo '^vignettes\/.*-vignette\.Rnw$' >> .Rbuildignore

  # https://github.com/Homebrew/homebrew-core/blob/master/Formula/gcc.rb
  # I think PKG_CXX etc only needed if Makevars in the package itself, not ~/.R/Makevars
  # openblas may need brew linking. may be best NOT to overwrite gfortran?
  - export HOMEBREW_NO_INSTALL_CLEANUP=1 && if [[ "$(uname -s)" = 'Darwin' ]] && [[ $ICD_USE_XCODE_CLANG != 'true' ]]; then
      brew upgrade ;
      brew install gcc ;
      brew link --overwrite gcc ;
      cat tools/mk/travis-macos.mk  >> ~/.R/Makevars ;
      Rscript -e 'install.packages("Rcpp", type = "source")' ;
    fi
  - cat ~/.R/Makevars
  - cat .Rbuildignore
  - Rscript -e '.libPaths(); getOption("repos")'
  - pwd
  # for the pre-built static vignette stubs to include the actual vignettes.
  # Make sure travis latex: true is set just for relevant builds. Official way to add latex packages is:
  # before_install:
  #   - tlmgr install index
  # and/or? something like:
  # - Rscript -e 'if (!require("tinytex", character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {quit(status=1)} else {tinytex::install_tinytex(); tinytex::tlmgr_install("pdfpages", "ae")}' || hash tlmgr 2>/dev/null && { tlmgr --usermode install pdfpages ae; }

#env: #  global: instead of defining here, source tools/env/travis-global

jobs:
  fast_finish: true
  include:
  - r: devel
    dist: bionic
    # note that the default compilers are quite far behind, e.g. bionic is only gcc 7 by default. See:
    # https://docs.travis-ci.com/user/languages/c/#choosing-compilers-to-test-against
    compiler: gcc
    env:
      - ICD_MINI_BENCH=true
  - r: release
    compiler: clang
    dist: bionic
    env:
      - ICD_MINI_BENCH=true
  - r: release
    compiler: gcc
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
    - ICD_COVERAGE=true
    - ICD_MINI_BENCH=false
    - ICD_TEST_SLOW=true
  - r: oldrel
    compiler: gcc
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
  # MacOS: https://docs.travis-ci.com/user/languages/c/#gcc-on-macos
  - r: release
    os: osx
    # xcode image is needed so things like _stdio.h are available to GCC.
    osx_image: xcode10.3
#    compiler: gcc # redundant: done by logic in before_intall
    addons:
      homebrew:
        packages:
          - checkbashisms
    env:
      - ICD_MINI_BENCH=true
  - r: devel
    os: osx
    osx_image: xcode10.3
    addons:
      homebrew:
        packages:
          - checkbashisms
#    compiler: gcc # redundant: done by logic in before_intall
  - r: devel
    os: osx
    addons:
      homebrew:
        packages:
          - checkbashisms
    # as of May 2019, default osx image is 9.4.1
    # https://docs.travis-ci.com/user/reference/osx#xcode-version
    # compiler: clang # redundant
    env: ICD_USE_XCODE_CLANG=true
  - r: release
    os: osx
    addons:
      homebrew:
        packages:
          - checkbashisms
    # compiler: clang # redundant
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
    - ICD_USE_XCODE_CLANG=true
    - ICD_MINI_BENCH=true
  - r: release
    arch: arm64
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
    - ICD_MINI_BENCH=true
    - ICD_TEST_SLOW=true
  allow_failures:
  # allow any osx to fail for now: error prone tool chain
  - os: osx
  - arch: arm64
  - arch: ppc64le
  - arch: s390x
  - r: oldrel
  - r: release
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
    - ICD_COVERAGE=true
    - ICD_MINI_BENCH=false
    - ICD_TEST_SLOW=true

before_script:
# n.b., before_install bash exports are not preserved beyond each shell invocation.
 - set -o allexport; source tools/env/travis-global; set +o allexport;
 - set
 - echo "$LD_LIBRARY_PATH"
 - if [ x"$ICD_TEST_SLOW" = x"true" ]; then
     Rscript -e 'source("tools/split-tests.R"); testthat_split();';
   fi

after_script:
 # should fail and stop travis with error if the quick benchmark code fails
 - if [ x"$ICD_MINI_BENCH" = x"true" ]; then
     cd benchmarks/icd-JSS3447-replication;
     eval "make bench3"
     eval "make replmat"
     cd ../..;
   fi

after_success:
 - if [ "$ICD_COVERAGE" = "true" ]; then
     Rscript -e 'source("tools/split-tests.R"); testthat_split();';
     Rscript -e 'install.packages("covr"); covr::codecov(quiet = FALSE)';
   fi

notifications:
  email:
    on_success: change
    on_failure: always
